# Install dependencies
!pip install opencv-python-headless matplotlib scikit-learn pillow pandas

import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from PIL import Image, ImageDraw, ImageFont
import pandas as pd
from google.colab import files

# Upload image
uploaded = files.upload()
image_path = list(uploaded.keys())[0]

# Load and resize image
img = Image.open(image_path).convert('RGB')
img = img.resize((400, 400))
img_np = np.array(img)
pixels = img_np.reshape((-1, 3))

# Apply KMeans clustering
k = 5
kmeans = KMeans(n_clusters=k, random_state=42)
kmeans.fit(pixels)
colors = np.array(kmeans.cluster_centers_, dtype='uint8')
labels, counts = np.unique(kmeans.labels_, return_counts=True)

# Convert to hex codes
def rgb_to_hex(color):
    return "#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2]))
hex_colors = [rgb_to_hex(c) for c in colors]

# Create bar with hex text
def create_color_bar(colors, counts, hex_colors):
    total = sum(counts)
    bar = Image.new("RGB", (300, 50), (255, 255, 255))
    draw = ImageDraw.Draw(bar)
    start = 0
    for i, color in enumerate(colors):
        width = int((counts[i] / total) * 300)
        draw.rectangle([start, 0, start + width, 50], fill=tuple(color))
        # Add hex code text
        if width > 40:
            draw.text((start + 5, 15), hex_colors[i], fill=(0, 0, 0))
        start += width
    return bar

bar_img = create_color_bar(colors, counts, hex_colors)

# Display original image + color bar
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.imshow(img_np)
plt.title("Uploaded Image")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.imshow(bar_img)
plt.title("Dominant Colors (with Hex)")
plt.axis("off")
plt.tight_layout()
plt.show()
# Save bar image
bar_img_path = "dominant_colors_bar.jpg"
bar_img.save(bar_img_path)
files.download(bar_img_path)
